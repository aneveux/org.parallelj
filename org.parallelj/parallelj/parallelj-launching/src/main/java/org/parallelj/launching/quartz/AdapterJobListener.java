/*
 *     ParallelJ, framework for parallel computing
 *
 *     Copyright (C) 2010 Atos Worldline or third-party contributors as
 *     indicated by the @author tags or express copyright attribution
 *     statements applied by the authors.
 *
 *     This library is free software; you can redistribute it and/or
 *     modify it under the terms of the GNU Lesser General Public
 *     License as published by the Free Software Foundation; either
 *     version 2.1 of the License.
 *
 *     This library is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *     Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public
 *     License along with this library; if not, write to the Free Software
 *     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

package org.parallelj.launching.quartz;

import java.util.concurrent.CountDownLatch;

import org.parallelj.launching.LaunchingMessageKind;
import org.quartz.JobDetail;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.quartz.JobKey;
import org.quartz.JobListener;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.SchedulerListener;
import org.quartz.Trigger;
import org.quartz.TriggerKey;

/**
 * Quartz Job listener for Program Launching.
 */
public class AdapterJobListener implements JobListener, SchedulerListener {

	/**
	 * The ParalleljScheduler used to launch Programs.
	 */
	private Scheduler scheduler;

	/**
	 * A Synchronization aid that will be used to wait until a program is
	 * terminated when launched synchronously.
	 */
	private CountDownLatch latcher = null;

	/**
	 * The result of a Program launching.
	 */
	private Object result = null;

	/**
	 * The Adapter Program class.
	 */
	private String jobClass = null;

	/**
	 * The JobId generated by quartz.
	 * This is the JobId used for restarting an already launched Program.
	 */
	private String jobId = "unknown";

	/**
	 * Default Constructor.
	 * 
	 * @param jobClass The Program Adpater class
	 * @param scheduler The scheduler used to launch Programs.
	 */
	public AdapterJobListener(String jobClass, Scheduler scheduler) {
		this.jobClass = jobClass;
		this.scheduler = scheduler;
	}

	/**
	 * Get the JobId generated by Quartz.
	 * 
	 * @return jobId
	 */
	public final String getJobId() {
		return jobId;
	}

	/**
	 *	Set a CountDownLatch to this listener.
	 * 
	 * @param latcher
	 */
	public void setLatcher(CountDownLatch latcher) {
		this.latcher = latcher;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.JobListener#getName()
	 */
	@Override
	public final String getName() {
		return this.toString();
	}

	/**
	 * Get the result of the launched.
	 * 
	 * @return
	 */
	public Object getResult() {
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.quartz.JobListener#jobWasExecuted(org.quartz.JobExecutionContext,
	 * org.quartz.JobExecutionException)
	 */
	@Override
	public final void jobWasExecuted(JobExecutionContext context,
			JobExecutionException jobException) {
		if (context.getFireInstanceId() != null) {
			this.jobId = context.getFireInstanceId();
		}
		this.result = context.getResult();
		LaunchingMessageKind.IQUARTZ0003.format(this.jobClass, this.jobId);
		try {
			this.scheduler.getListenerManager().removeJobListener(
					this.getName());
		} catch (SchedulerException e) {
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.quartz.JobListener#jobToBeExecuted(org.quartz.JobExecutionContext)
	 */
	@Override
	public void jobToBeExecuted(JobExecutionContext context) {
		if (context.getFireInstanceId() != null) {
			this.jobId = context.getFireInstanceId();
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.quartz.JobListener#jobExecutionVetoed(org.quartz.JobExecutionContext)
	 */
	@Override
	public void jobExecutionVetoed(JobExecutionContext context) {
		if (context.getFireInstanceId() != null) {
			this.jobId = context.getFireInstanceId();
		}
		this.result = context.getResult();
		if (latcher != null) {
			latcher.countDown();
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#jobDeleted(org.quartz.JobKey)
	 */
	@Override
	public void jobDeleted(JobKey jobKey) {
		if (latcher != null) {
			latcher.countDown();
		}
		try {
			this.scheduler.getListenerManager().removeJobListener(
					this.getName());
		} catch (SchedulerException e) {
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#triggerFinalized(org.quartz.Trigger)
	 */
	@Override
	public void triggerFinalized(Trigger trigger) {
		if (latcher != null) {
			latcher.countDown();
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#jobScheduled(org.quartz.Trigger)
	 */
	@Override
	public void jobScheduled(Trigger trigger) {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#jobUnscheduled(org.quartz.TriggerKey)
	 */
	@Override
	public void jobUnscheduled(TriggerKey triggerKey) {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#triggerPaused(org.quartz.TriggerKey)
	 */
	@Override
	public void triggerPaused(TriggerKey triggerKey) {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#triggersPaused(java.lang.String)
	 */
	@Override
	public void triggersPaused(String triggerGroup) {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#triggerResumed(org.quartz.TriggerKey)
	 */
	@Override
	public void triggerResumed(TriggerKey triggerKey) {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#triggersResumed(java.lang.String)
	 */
	@Override
	public void triggersResumed(String triggerGroup) {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#jobAdded(org.quartz.JobDetail)
	 */
	@Override
	public void jobAdded(JobDetail jobDetail) {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#jobPaused(org.quartz.JobKey)
	 */
	@Override
	public void jobPaused(JobKey jobKey) {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#jobsPaused(java.lang.String)
	 */
	@Override
	public void jobsPaused(String jobGroup) {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#jobResumed(org.quartz.JobKey)
	 */
	@Override
	public void jobResumed(JobKey jobKey) {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#jobsResumed(java.lang.String)
	 */
	@Override
	public void jobsResumed(String jobGroup) {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#schedulerError(java.lang.String,
	 * org.quartz.SchedulerException)
	 */
	@Override
	public void schedulerError(String msg, SchedulerException cause) {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#schedulerInStandbyMode()
	 */
	@Override
	public void schedulerInStandbyMode() {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#schedulerStarted()
	 */
	@Override
	public void schedulerStarted() {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#schedulerShutdown()
	 */
	@Override
	public void schedulerShutdown() {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#schedulerShuttingdown()
	 */
	@Override
	public void schedulerShuttingdown() {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.quartz.SchedulerListener#schedulingDataCleared()
	 */
	@Override
	public void schedulingDataCleared() {
	}
}
